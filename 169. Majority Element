Question:The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 Example 1:
Input: nums = [3,2,3]
Output: 3



Brute Force (O(n²)) → Works, but slow for large inputs.

******code********

class Solution {
    public int majorityElement(int[] nums) {
        
     int n=nums.length;

    for (int i=0;i<n;i++){
       int count=0;

        for(int j=0;j<n;j++){
            if(nums[j]==nums[i]){
                count++;
            }
            if(count>n/2){
                return nums[i];
            }
        }

    }

     return -1;   
    }
}




################## Optimized Approach - Boyer-Moore Voting Algorithm (O(n)) #########################

The Boyer-Moore Voting Algorithm efficiently finds the majority element in linear time with constant space.


*******************Step-by-Step Process:
1.Initialize:

-->Set candidate = nums[0]
-->Set count = 1

2.Iterate through the array:

-->If nums[i] == candidate, increase count.
-->If nums[i] != candidate, decrease count.
-->If count == 0, update candidate to nums[i] and reset count = 1.
-->Return the candidate as the majority element.



**********CODE*************

class Solution {
    public int majorityElement(int[] nums) {
        int candidate = nums[0];
        int count = 1;

        for (int i = 1; i < nums.length; i++) {
            if (count == 0) {
                candidate = nums[i];
                count = 1;
            } else if (nums[i] == candidate) {
                count++;
            } else {
                count--;
            }
        }

        return candidate;
    }
}
